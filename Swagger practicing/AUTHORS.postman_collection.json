{
	"info": {
		"_postman_id": "b7b41914-6064-4b2f-87b6-98df5f4cc10e",
		"name": "AUTHORS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1537620"
	},
	"item": [
		{
			"name": "Get Authors",
			"item": [
				{
					"name": "Get All Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should equal 200 and OK\",function() {\r",
									"pm.expect(pm.response.code).to.equal(200);\r",
									"pm.expect(pm.response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"response Size\",function(){\r",
									"    //mini max using within\r",
									"   pm.expect(pm.response.responseSize).to.be.within(30000,50000);\r",
									"});\r",
									"\r",
									"//testing response header \r",
									"pm.test(\"check header value json Type\",function(){\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.include(\"application/json; charset=utf-8\")\r",
									"});\r",
									"\r",
									"//check for id ,idBook,first name , last name ...etc\r",
									"pm.test(\"Response Body contain id ,idBook,first name, last name\",function(){\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"idBook\");\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"});\r",
									"\r",
									"\r",
									"/*\r",
									"//Generate a random id\r",
									"var objectNum = pm.response.json().length\r",
									"var randomNum = Math.floor(Math.random()*objectNum)\r",
									"pm.environment.set(\"id\",pm.response.json()[randomNum].id);\r",
									"*/\r",
									"\r",
									"/*//Generate a random idbook\r",
									"var objectNum = pm.response.json().length\r",
									"var randomNum = Math.floor(Math.random()*objectNum)\r",
									"pm.environment.set(\"idBook\",pm.response.json()[randomNum].idBook);\r",
									"*/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unvalid Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"unvalid Author response 404 Not Found\",function(){\r",
									"pm.expect(pm.response.code).to.equal(404);\r",
									"pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors/0",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Author idBook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var currentidBook = pm.environment.get(\"idBook\");\r",
									"currentidBook =Number(currentidBook); //casting\r",
									"pm.test(\"Searching with valid idBook\",function(){\r",
									"\r",
									"   for(var i =0 ; i< pm.response.json().length ; i++)\r",
									"   pm.expect(pm.response.json()[i].idBook).to.equal(currentidBook);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors/authors/books/{{idBook}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"authors",
								"books",
								"{{idBook}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Author ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200,OK\" ,function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"The author's data is changed in GET request\",function(){\r",
									"\r",
									"    pm.expect(pm.response.json().firstName).to.contain(\"NEW First name\");\r",
									"    pm.expect(pm.response.json().lastName).to.contain(\"NEW Last Name\");\r",
									"\r",
									"   });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors/{{id}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Authors",
			"item": [
				{
					"name": "Create New Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200,OK\" ,function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"firstName or lastName is mandatory\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"response Body contains firstname & lastname\", function(){\r",
									"     pm.expect(pm.response.json()).to.have.any.keys('firstName','lastName');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{id}},\r\n  \"idBook\": {{idBook}},\r\n  \"firstName\": {{firstName}},\r\n  \"lastName\": {{lastName}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"id\", 1);\r",
									"\r",
									"pm.test(\"Status code is 200,OK\" ,function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Author updated successfully\", function(){\r",
									"     pm.expect(pm.response.json().firstName).to.contain(\"NEW First name\");\r",
									"     pm.expect(pm.response.json().lastName).to.contain(\"NEW Last Name\");\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{id}},\r\n  \"idBook\": {{idBook}},\r\n  \"firstName\": \"NEW First name\",\r\n  \"lastName\": \"NEW Last Name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors/{{id}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Authors",
			"item": [
				{
					"name": "Delete Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200,OK\" ,function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/api/v1/Authors/{{id}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}